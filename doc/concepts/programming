
  PROGRAMMING

  Willow is a single-threaded, message-passing, non-preemptive application
  framework for the ATmega328P, as found in the Arduino UNO, NANO and others.

  Willow can perform concurrent operations provided each task is well behaved.
  This includes correctness, liveness and freedom from lockout.

  the _delay_us(double __us) macro defined in <util/delay.h> where precision
  is required. An interminable busy wait would trigger the Watchdog Reset when
  it exceeds the message processing time limit. The Watchdog can be disabled
  if necessary - for example see isp/hvpp.c.
  
  The onus is upon each task to implement explicit multitasking by performing
  its operation in cpu-bound stages. These stages are revealed naturally as
  the punctuation of sending a message provides the separation.

  Where an Arduino sketch can implement a tight loop in a few instructions,
  within Willow each statement may involve sending a message and at some time
  later receiving a reply. The loop remains, but is very much wider.

  The progress from one stage to the next being saved in a private state
  variable to indicate the resumption point, like a coarse grain program
  counter, followed by a yield by way of returning to the main loop in
  order to actually deliver the message to the destination task.

  Where the logic is extensive, two simple tasks might be better. 

  The Barograph application involves two separate processes:-
   a. Reading the sensor and writing the measurements at regular intervals.
   b. Reading the logfile through the Bluetooth adapter.

  The process to log the barometer measurements involves an arrangement
  between fido and oslo:-

    On fido: TPLOG CLK BMP TWI
    On oslo: FSD READF PATH TWI RWR MAP INO SSD

  Reading the log file through the Bluetooth adapter involves a separate
  arrangement between bali and oslo:-

    On bali: CLI TWI CLK SER
    On iowa: FSU CATFILE TWI
    On oslo: TWI MEMZ FSD SSD

